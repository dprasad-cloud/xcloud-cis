rootProject.name = 'xcloud-cis'

def buildFiles = fileTree(rootDir) {
    def excludes = gradle.startParameter.projectProperties.get("excludeProjects")?.split(",")
    include "**/*.gradle"
    exclude "build", "**/gradle", "settings.gradle", "buildSrc", "/build.gradle", ".*", "out"
    if (excludes) {
        exclude excludes
    }
}

buildFiles.forEach { buildFile ->
    def isDefaultName = buildFile.name == "build.gradle" || buildFile.name == "build.gradle.kts"
    if (isDefaultName) {
        def buildFilePath = buildFile.parentFile.absolutePath
        def projectPath = buildFilePath.replace((String) rootDir.absolutePath, "").replace(File.separator, ":")
        include projectPath
    } else {
        def projectName = buildFile.name.replace(".gradle", "")
        def projectPath = ":$projectName"
        include projectPath
        def project = findProject(projectPath)
        project.name = projectName
        project.projectDir = buildFile.parentFile
        project.buildFileName = buildFile.name
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        mavenLocal()
        maven { url 'https://nexus-aws.aerohive.com/content/groups/public/' }
        maven { url 'https://nexus-aws.aerohive.com/content/repositories/central/' }
        maven { url 'https://nexus-aws.aerohive.com/content/groups/hive-repository/' }
        maven { url 'https://nexus-aws.aerohive.com/content/repositories/snapshots/' }
        maven { url 'https://nexus-aws.aerohive.com/content/repositories/releases/' }
        maven { url 'https://build.shibboleth.net/maven/releases/' }        
        mavenCentral()        
        // Declare the Node.js download repository
        ivy {
            name = "Node.js"
            setUrl("https://nodejs.org/dist/")
            patternLayout {
                artifact("v[revision]/[artifact](-v[revision]-[classifier]).[ext]")
            }
            metadataSources {
                artifact()
            }
            content {
                includeModule("org.nodejs", "node")
            }
        }
    }
    versionCatalogs {
        libs {
            from(files("libs.versions.toml"))
        }
    }
}
